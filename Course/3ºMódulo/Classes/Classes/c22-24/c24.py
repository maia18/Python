""" Polimorfismo em Python Orientado a Objetos """
# üìç Polimorfismo - princ√≠pio em que classes derivadas de uma mesma superclasse tenham m√©todos iguais (com mesma assinatura) mas comportamentos diferentes.
# üìö Assinatura do m√©todo = Mesmo nome e quantidade de par√¢metros (retorno n√£o faz parte da assinatura).

# Opini√£o + princ√≠pios que contam:
#   ‚Ä¢ Assinatura do m√©todo: nome, par√¢metros e retorno iguais
#   ‚Ä¢ SO"L"ID
#   ‚Ä¢ Princ√≠pio da substitui√ß√£o de liskov

# Objetos de uma superclasse devem ser substitu√≠veis por objetos de uma subclasse sem quebrar a aplica√ß√£o.
#  Sobrecarga  de m√©todos (overload) üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
from abc import ABC, abstractmethod

class Notifica√ß√£o(ABC):
    def __init__(self, mensagem) -> None:
        self.mensagem = mensagem

    @abstractmethod
    def enviar(self) -> bool: ...


class Email_Notifica√ß√£o(Notifica√ß√£o):
    def enviar(self) -> bool:
        print('E-mail: enviando - ', self.mensagem)
        return True


class SMS_Notifica√ß√£o(Notifica√ß√£o):
    def enviar(self) -> bool:
        print('SMS: enviando - ', self.mensagem)
        return False


def notificar(notificacao: Notifica√ß√£o):
    notificacao_enviada = notificacao.enviar()

    if notificacao_enviada:
        print('NOTIFICA√á√ÉO ENVIADA!')
    else:
        print('NOTIFICA√á√ÉO N√ÉO ENVIADA!')


notificacao_email = Email_Notifica√ß√£o('testando e-mail')
notificar(notificacao_email) # E-mail: enviando -  testando e-mail
                             # NOTIFICA√á√ÉO ENVIADA!
                             
notificacao_sms = SMS_Notifica√ß√£o('testando SMS')
notificar(notificacao_sms)  # SMS: enviando -  testando SMS
                            # NOTIFICA√á√ÉO N√ÉO ENVIADA!